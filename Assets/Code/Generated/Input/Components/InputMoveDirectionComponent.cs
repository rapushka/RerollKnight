//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputContext {

    public InputEntity moveDirectionEntity { get { return GetGroup(InputMatcher.MoveDirection).GetSingleEntity(); } }
    public Code.Ecs.Components.MoveDirectionComponent moveDirection { get { return moveDirectionEntity.moveDirection; } }
    public bool hasMoveDirection { get { return moveDirectionEntity != null; } }

    public InputEntity SetMoveDirection(float newValue) {
        if (hasMoveDirection) {
            throw new Entitas.EntitasException("Could not set MoveDirection!\n" + this + " already has an entity with Code.Ecs.Components.MoveDirectionComponent!",
                "You should check if the context already has a moveDirectionEntity before setting it or use context.ReplaceMoveDirection().");
        }
        var entity = CreateEntity();
        entity.AddMoveDirection(newValue);
        return entity;
    }

    public void ReplaceMoveDirection(float newValue) {
        var entity = moveDirectionEntity;
        if (entity == null) {
            entity = SetMoveDirection(newValue);
        } else {
            entity.ReplaceMoveDirection(newValue);
        }
    }

    public void RemoveMoveDirection() {
        moveDirectionEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Code.Ecs.Components.MoveDirectionComponent moveDirection { get { return (Code.Ecs.Components.MoveDirectionComponent)GetComponent(InputComponentsLookup.MoveDirection); } }
    public bool hasMoveDirection { get { return HasComponent(InputComponentsLookup.MoveDirection); } }

    public void AddMoveDirection(float newValue) {
        var index = InputComponentsLookup.MoveDirection;
        var component = (Code.Ecs.Components.MoveDirectionComponent)CreateComponent(index, typeof(Code.Ecs.Components.MoveDirectionComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMoveDirection(float newValue) {
        var index = InputComponentsLookup.MoveDirection;
        var component = (Code.Ecs.Components.MoveDirectionComponent)CreateComponent(index, typeof(Code.Ecs.Components.MoveDirectionComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMoveDirection() {
        RemoveComponent(InputComponentsLookup.MoveDirection);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherMoveDirection;

    public static Entitas.IMatcher<InputEntity> MoveDirection {
        get {
            if (_matcherMoveDirection == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.MoveDirection);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherMoveDirection = matcher;
            }

            return _matcherMoveDirection;
        }
    }
}
