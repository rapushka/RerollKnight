//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ServicesContext {

    public ServicesEntity assetsEntity { get { return GetGroup(ServicesMatcher.Assets).GetSingleEntity(); } }
    public Code.Components.AssetsComponent assets { get { return assetsEntity.assets; } }
    public bool hasAssets { get { return assetsEntity != null; } }

    public ServicesEntity SetAssets(Code.IAssetsService newValue) {
        if (hasAssets) {
            throw new Entitas.EntitasException("Could not set Assets!\n" + this + " already has an entity with Code.Components.AssetsComponent!",
                "You should check if the context already has a assetsEntity before setting it or use context.ReplaceAssets().");
        }
        var entity = CreateEntity();
        entity.AddAssets(newValue);
        return entity;
    }

    public void ReplaceAssets(Code.IAssetsService newValue) {
        var entity = assetsEntity;
        if (entity == null) {
            entity = SetAssets(newValue);
        } else {
            entity.ReplaceAssets(newValue);
        }
    }

    public void RemoveAssets() {
        assetsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ServicesEntity {

    public Code.Components.AssetsComponent assets { get { return (Code.Components.AssetsComponent)GetComponent(ServicesComponentsLookup.Assets); } }
    public bool hasAssets { get { return HasComponent(ServicesComponentsLookup.Assets); } }

    public void AddAssets(Code.IAssetsService newValue) {
        var index = ServicesComponentsLookup.Assets;
        var component = (Code.Components.AssetsComponent)CreateComponent(index, typeof(Code.Components.AssetsComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAssets(Code.IAssetsService newValue) {
        var index = ServicesComponentsLookup.Assets;
        var component = (Code.Components.AssetsComponent)CreateComponent(index, typeof(Code.Components.AssetsComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveAssets() {
        RemoveComponent(ServicesComponentsLookup.Assets);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ServicesMatcher {

    static Entitas.IMatcher<ServicesEntity> _matcherAssets;

    public static Entitas.IMatcher<ServicesEntity> Assets {
        get {
            if (_matcherAssets == null) {
                var matcher = (Entitas.Matcher<ServicesEntity>)Entitas.Matcher<ServicesEntity>.AllOf(ServicesComponentsLookup.Assets);
                matcher.componentNames = ServicesComponentsLookup.componentNames;
                _matcherAssets = matcher;
            }

            return _matcherAssets;
        }
    }
}
