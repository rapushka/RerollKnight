//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ChipsEntity {

    static readonly Code.PreparedAbilityComponent preparedAbilityComponent = new Code.PreparedAbilityComponent();

    public bool isPreparedAbility {
        get { return HasComponent(ChipsComponentsLookup.PreparedAbility); }
        set {
            if (value != isPreparedAbility) {
                var index = ChipsComponentsLookup.PreparedAbility;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : preparedAbilityComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ChipsMatcher {

    static Entitas.IMatcher<ChipsEntity> _matcherPreparedAbility;

    public static Entitas.IMatcher<ChipsEntity> PreparedAbility {
        get {
            if (_matcherPreparedAbility == null) {
                var matcher = (Entitas.Matcher<ChipsEntity>)Entitas.Matcher<ChipsEntity>.AllOf(ChipsComponentsLookup.PreparedAbility);
                matcher.componentNames = ChipsComponentsLookup.componentNames;
                _matcherPreparedAbility = matcher;
            }

            return _matcherPreparedAbility;
        }
    }
}
